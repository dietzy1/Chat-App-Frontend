// @generated by protoc-gen-es v1.0.0 with parameter "target=ts"
// @generated from file protos/chatroom/v1/chatroomgateway_service.proto (package chatroomgateway.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message chatroomgateway.v1.CreateRoomRequest
 */
export class CreateRoomRequest extends Message<CreateRoomRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string owner_uuid = 2;
   */
  ownerUuid = "";

  constructor(data?: PartialMessage<CreateRoomRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "chatroomgateway.v1.CreateRoomRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "owner_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRoomRequest {
    return new CreateRoomRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRoomRequest {
    return new CreateRoomRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRoomRequest {
    return new CreateRoomRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateRoomRequest | PlainMessage<CreateRoomRequest> | undefined, b: CreateRoomRequest | PlainMessage<CreateRoomRequest> | undefined): boolean {
    return proto3.util.equals(CreateRoomRequest, a, b);
  }
}

/**
 * @generated from message chatroomgateway.v1.CreateRoomResponse
 */
export class CreateRoomResponse extends Message<CreateRoomResponse> {
  constructor(data?: PartialMessage<CreateRoomResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "chatroomgateway.v1.CreateRoomResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRoomResponse {
    return new CreateRoomResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRoomResponse {
    return new CreateRoomResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRoomResponse {
    return new CreateRoomResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateRoomResponse | PlainMessage<CreateRoomResponse> | undefined, b: CreateRoomResponse | PlainMessage<CreateRoomResponse> | undefined): boolean {
    return proto3.util.equals(CreateRoomResponse, a, b);
  }
}

/**
 * @generated from message chatroomgateway.v1.DeleteRoomRequest
 */
export class DeleteRoomRequest extends Message<DeleteRoomRequest> {
  /**
   * @generated from field: string chatroom_uuid = 1;
   */
  chatroomUuid = "";

  /**
   * @generated from field: string owner_uuid = 2;
   */
  ownerUuid = "";

  constructor(data?: PartialMessage<DeleteRoomRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "chatroomgateway.v1.DeleteRoomRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chatroom_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "owner_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRoomRequest {
    return new DeleteRoomRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRoomRequest {
    return new DeleteRoomRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRoomRequest {
    return new DeleteRoomRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteRoomRequest | PlainMessage<DeleteRoomRequest> | undefined, b: DeleteRoomRequest | PlainMessage<DeleteRoomRequest> | undefined): boolean {
    return proto3.util.equals(DeleteRoomRequest, a, b);
  }
}

/**
 * @generated from message chatroomgateway.v1.DeleteRoomResponse
 */
export class DeleteRoomResponse extends Message<DeleteRoomResponse> {
  constructor(data?: PartialMessage<DeleteRoomResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "chatroomgateway.v1.DeleteRoomResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRoomResponse {
    return new DeleteRoomResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRoomResponse {
    return new DeleteRoomResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRoomResponse {
    return new DeleteRoomResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteRoomResponse | PlainMessage<DeleteRoomResponse> | undefined, b: DeleteRoomResponse | PlainMessage<DeleteRoomResponse> | undefined): boolean {
    return proto3.util.equals(DeleteRoomResponse, a, b);
  }
}

/**
 * @generated from message chatroomgateway.v1.GetRoomRequest
 */
export class GetRoomRequest extends Message<GetRoomRequest> {
  /**
   * @generated from field: string chatroom_uuid = 1;
   */
  chatroomUuid = "";

  constructor(data?: PartialMessage<GetRoomRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "chatroomgateway.v1.GetRoomRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chatroom_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRoomRequest {
    return new GetRoomRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRoomRequest {
    return new GetRoomRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRoomRequest {
    return new GetRoomRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRoomRequest | PlainMessage<GetRoomRequest> | undefined, b: GetRoomRequest | PlainMessage<GetRoomRequest> | undefined): boolean {
    return proto3.util.equals(GetRoomRequest, a, b);
  }
}

/**
 * @generated from message chatroomgateway.v1.GetRoomResponse
 */
export class GetRoomResponse extends Message<GetRoomResponse> {
  /**
   * @generated from field: string chatroom_uuid = 1;
   */
  chatroomUuid = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string icon = 3;
   */
  icon = "";

  /**
   * @generated from field: string owner_uuid = 4;
   */
  ownerUuid = "";

  /**
   * @generated from field: repeated string user_uuids = 5;
   */
  userUuids: string[] = [];

  /**
   * @generated from field: repeated chatroomgateway.v1.Channel channel = 6;
   */
  channel: Channel[] = [];

  constructor(data?: PartialMessage<GetRoomResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "chatroomgateway.v1.GetRoomResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chatroom_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "icon", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "owner_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "user_uuids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "channel", kind: "message", T: Channel, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRoomResponse {
    return new GetRoomResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRoomResponse {
    return new GetRoomResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRoomResponse {
    return new GetRoomResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRoomResponse | PlainMessage<GetRoomResponse> | undefined, b: GetRoomResponse | PlainMessage<GetRoomResponse> | undefined): boolean {
    return proto3.util.equals(GetRoomResponse, a, b);
  }
}

/**
 * @generated from message chatroomgateway.v1.Channel
 */
export class Channel extends Message<Channel> {
  /**
   * @generated from field: string channel_uuid = 1;
   */
  channelUuid = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string chatroom_uuid = 3;
   */
  chatroomUuid = "";

  /**
   * @generated from field: string owner_uuid = 4;
   */
  ownerUuid = "";

  constructor(data?: PartialMessage<Channel>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "chatroomgateway.v1.Channel";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "channel_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "chatroom_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "owner_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Channel {
    return new Channel().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Channel {
    return new Channel().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Channel {
    return new Channel().fromJsonString(jsonString, options);
  }

  static equals(a: Channel | PlainMessage<Channel> | undefined, b: Channel | PlainMessage<Channel> | undefined): boolean {
    return proto3.util.equals(Channel, a, b);
  }
}

/**
 * @generated from message chatroomgateway.v1.GetRoomsRequest
 */
export class GetRoomsRequest extends Message<GetRoomsRequest> {
  /**
   * @generated from field: repeated string chatroom_uuids = 1;
   */
  chatroomUuids: string[] = [];

  constructor(data?: PartialMessage<GetRoomsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "chatroomgateway.v1.GetRoomsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chatroom_uuids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRoomsRequest {
    return new GetRoomsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRoomsRequest {
    return new GetRoomsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRoomsRequest {
    return new GetRoomsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRoomsRequest | PlainMessage<GetRoomsRequest> | undefined, b: GetRoomsRequest | PlainMessage<GetRoomsRequest> | undefined): boolean {
    return proto3.util.equals(GetRoomsRequest, a, b);
  }
}

/**
 * @generated from message chatroomgateway.v1.GetRoomsResponse
 */
export class GetRoomsResponse extends Message<GetRoomsResponse> {
  /**
   * @generated from field: repeated chatroomgateway.v1.GetRoomResponse rooms = 1;
   */
  rooms: GetRoomResponse[] = [];

  constructor(data?: PartialMessage<GetRoomsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "chatroomgateway.v1.GetRoomsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rooms", kind: "message", T: GetRoomResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRoomsResponse {
    return new GetRoomsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRoomsResponse {
    return new GetRoomsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRoomsResponse {
    return new GetRoomsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRoomsResponse | PlainMessage<GetRoomsResponse> | undefined, b: GetRoomsResponse | PlainMessage<GetRoomsResponse> | undefined): boolean {
    return proto3.util.equals(GetRoomsResponse, a, b);
  }
}

/**
 * @generated from message chatroomgateway.v1.CreateChannelRequest
 */
export class CreateChannelRequest extends Message<CreateChannelRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string owner_uuid = 2;
   */
  ownerUuid = "";

  /**
   * @generated from field: string chatroom_uuid = 3;
   */
  chatroomUuid = "";

  constructor(data?: PartialMessage<CreateChannelRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "chatroomgateway.v1.CreateChannelRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "owner_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "chatroom_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateChannelRequest {
    return new CreateChannelRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateChannelRequest {
    return new CreateChannelRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateChannelRequest {
    return new CreateChannelRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateChannelRequest | PlainMessage<CreateChannelRequest> | undefined, b: CreateChannelRequest | PlainMessage<CreateChannelRequest> | undefined): boolean {
    return proto3.util.equals(CreateChannelRequest, a, b);
  }
}

/**
 * @generated from message chatroomgateway.v1.CreateChannelResponse
 */
export class CreateChannelResponse extends Message<CreateChannelResponse> {
  constructor(data?: PartialMessage<CreateChannelResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "chatroomgateway.v1.CreateChannelResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateChannelResponse {
    return new CreateChannelResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateChannelResponse {
    return new CreateChannelResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateChannelResponse {
    return new CreateChannelResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateChannelResponse | PlainMessage<CreateChannelResponse> | undefined, b: CreateChannelResponse | PlainMessage<CreateChannelResponse> | undefined): boolean {
    return proto3.util.equals(CreateChannelResponse, a, b);
  }
}

/**
 * @generated from message chatroomgateway.v1.DeleteChannelRequest
 */
export class DeleteChannelRequest extends Message<DeleteChannelRequest> {
  /**
   * @generated from field: string chatroom_uuid = 1;
   */
  chatroomUuid = "";

  /**
   * @generated from field: string channel_uuid = 2;
   */
  channelUuid = "";

  /**
   * @generated from field: string owner_uuid = 3;
   */
  ownerUuid = "";

  constructor(data?: PartialMessage<DeleteChannelRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "chatroomgateway.v1.DeleteChannelRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chatroom_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "owner_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteChannelRequest {
    return new DeleteChannelRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteChannelRequest {
    return new DeleteChannelRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteChannelRequest {
    return new DeleteChannelRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteChannelRequest | PlainMessage<DeleteChannelRequest> | undefined, b: DeleteChannelRequest | PlainMessage<DeleteChannelRequest> | undefined): boolean {
    return proto3.util.equals(DeleteChannelRequest, a, b);
  }
}

/**
 * @generated from message chatroomgateway.v1.DeleteChannelResponse
 */
export class DeleteChannelResponse extends Message<DeleteChannelResponse> {
  constructor(data?: PartialMessage<DeleteChannelResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "chatroomgateway.v1.DeleteChannelResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteChannelResponse {
    return new DeleteChannelResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteChannelResponse {
    return new DeleteChannelResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteChannelResponse {
    return new DeleteChannelResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteChannelResponse | PlainMessage<DeleteChannelResponse> | undefined, b: DeleteChannelResponse | PlainMessage<DeleteChannelResponse> | undefined): boolean {
    return proto3.util.equals(DeleteChannelResponse, a, b);
  }
}

/**
 * @generated from message chatroomgateway.v1.GetChannelRequest
 */
export class GetChannelRequest extends Message<GetChannelRequest> {
  /**
   * @generated from field: string chatroom_uuid = 1;
   */
  chatroomUuid = "";

  /**
   * @generated from field: string channel_uuid = 2;
   */
  channelUuid = "";

  constructor(data?: PartialMessage<GetChannelRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "chatroomgateway.v1.GetChannelRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chatroom_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetChannelRequest {
    return new GetChannelRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetChannelRequest {
    return new GetChannelRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetChannelRequest {
    return new GetChannelRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetChannelRequest | PlainMessage<GetChannelRequest> | undefined, b: GetChannelRequest | PlainMessage<GetChannelRequest> | undefined): boolean {
    return proto3.util.equals(GetChannelRequest, a, b);
  }
}

/**
 * @generated from message chatroomgateway.v1.GetChannelResponse
 */
export class GetChannelResponse extends Message<GetChannelResponse> {
  /**
   * @generated from field: string chatroom_uuid = 1;
   */
  chatroomUuid = "";

  /**
   * @generated from field: string channel_uuid = 2;
   */
  channelUuid = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  constructor(data?: PartialMessage<GetChannelResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "chatroomgateway.v1.GetChannelResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chatroom_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetChannelResponse {
    return new GetChannelResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetChannelResponse {
    return new GetChannelResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetChannelResponse {
    return new GetChannelResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetChannelResponse | PlainMessage<GetChannelResponse> | undefined, b: GetChannelResponse | PlainMessage<GetChannelResponse> | undefined): boolean {
    return proto3.util.equals(GetChannelResponse, a, b);
  }
}

/**
 * @generated from message chatroomgateway.v1.InviteUserRequest
 */
export class InviteUserRequest extends Message<InviteUserRequest> {
  /**
   * @generated from field: string user_uuid = 1;
   */
  userUuid = "";

  /**
   * @generated from field: string chatroom_uuid = 2;
   */
  chatroomUuid = "";

  /**
   * @generated from field: string owner_uuid = 3;
   */
  ownerUuid = "";

  constructor(data?: PartialMessage<InviteUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "chatroomgateway.v1.InviteUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "chatroom_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "owner_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InviteUserRequest {
    return new InviteUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InviteUserRequest {
    return new InviteUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InviteUserRequest {
    return new InviteUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InviteUserRequest | PlainMessage<InviteUserRequest> | undefined, b: InviteUserRequest | PlainMessage<InviteUserRequest> | undefined): boolean {
    return proto3.util.equals(InviteUserRequest, a, b);
  }
}

/**
 * @generated from message chatroomgateway.v1.InviteUserResponse
 */
export class InviteUserResponse extends Message<InviteUserResponse> {
  constructor(data?: PartialMessage<InviteUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "chatroomgateway.v1.InviteUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InviteUserResponse {
    return new InviteUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InviteUserResponse {
    return new InviteUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InviteUserResponse {
    return new InviteUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: InviteUserResponse | PlainMessage<InviteUserResponse> | undefined, b: InviteUserResponse | PlainMessage<InviteUserResponse> | undefined): boolean {
    return proto3.util.equals(InviteUserResponse, a, b);
  }
}

/**
 * @generated from message chatroomgateway.v1.RemoveUserRequest
 */
export class RemoveUserRequest extends Message<RemoveUserRequest> {
  /**
   * @generated from field: string user_uuid = 1;
   */
  userUuid = "";

  /**
   * @generated from field: string chatroom_uuid = 2;
   */
  chatroomUuid = "";

  /**
   * @generated from field: string owner_uuid = 3;
   */
  ownerUuid = "";

  constructor(data?: PartialMessage<RemoveUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "chatroomgateway.v1.RemoveUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "chatroom_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "owner_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveUserRequest {
    return new RemoveUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveUserRequest {
    return new RemoveUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveUserRequest {
    return new RemoveUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveUserRequest | PlainMessage<RemoveUserRequest> | undefined, b: RemoveUserRequest | PlainMessage<RemoveUserRequest> | undefined): boolean {
    return proto3.util.equals(RemoveUserRequest, a, b);
  }
}

/**
 * @generated from message chatroomgateway.v1.RemoveUserResponse
 */
export class RemoveUserResponse extends Message<RemoveUserResponse> {
  constructor(data?: PartialMessage<RemoveUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "chatroomgateway.v1.RemoveUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveUserResponse {
    return new RemoveUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveUserResponse {
    return new RemoveUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveUserResponse {
    return new RemoveUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveUserResponse | PlainMessage<RemoveUserResponse> | undefined, b: RemoveUserResponse | PlainMessage<RemoveUserResponse> | undefined): boolean {
    return proto3.util.equals(RemoveUserResponse, a, b);
  }
}

/**
 * @generated from message chatroomgateway.v1.AddUserRequest
 */
export class AddUserRequest extends Message<AddUserRequest> {
  /**
   * @generated from field: string user_uuid = 1;
   */
  userUuid = "";

  /**
   * @generated from field: string chatroom_uuid = 2;
   */
  chatroomUuid = "";

  /**
   * @generated from field: string owner_uuid = 3;
   */
  ownerUuid = "";

  constructor(data?: PartialMessage<AddUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "chatroomgateway.v1.AddUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "chatroom_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "owner_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddUserRequest {
    return new AddUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddUserRequest {
    return new AddUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddUserRequest {
    return new AddUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddUserRequest | PlainMessage<AddUserRequest> | undefined, b: AddUserRequest | PlainMessage<AddUserRequest> | undefined): boolean {
    return proto3.util.equals(AddUserRequest, a, b);
  }
}

/**
 * @generated from message chatroomgateway.v1.AddUserResponse
 */
export class AddUserResponse extends Message<AddUserResponse> {
  constructor(data?: PartialMessage<AddUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "chatroomgateway.v1.AddUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddUserResponse {
    return new AddUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddUserResponse {
    return new AddUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddUserResponse {
    return new AddUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddUserResponse | PlainMessage<AddUserResponse> | undefined, b: AddUserResponse | PlainMessage<AddUserResponse> | undefined): boolean {
    return proto3.util.equals(AddUserResponse, a, b);
  }
}

