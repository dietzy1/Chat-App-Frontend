// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file protos/account/v1/accountgateway_service.proto (package accountgateway.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message accountgateway.v1.ChangeUsernameRequest
 */
export class ChangeUsernameRequest extends Message<ChangeUsernameRequest> {
  /**
   * @generated from field: string user_uuid = 1;
   */
  userUuid = "";

  /**
   * @generated from field: string username = 2;
   */
  username = "";

  constructor(data?: PartialMessage<ChangeUsernameRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "accountgateway.v1.ChangeUsernameRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangeUsernameRequest {
    return new ChangeUsernameRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangeUsernameRequest {
    return new ChangeUsernameRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangeUsernameRequest {
    return new ChangeUsernameRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ChangeUsernameRequest | PlainMessage<ChangeUsernameRequest> | undefined, b: ChangeUsernameRequest | PlainMessage<ChangeUsernameRequest> | undefined): boolean {
    return proto3.util.equals(ChangeUsernameRequest, a, b);
  }
}

/**
 * @generated from message accountgateway.v1.ChangeUsernameResponse
 */
export class ChangeUsernameResponse extends Message<ChangeUsernameResponse> {
  constructor(data?: PartialMessage<ChangeUsernameResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "accountgateway.v1.ChangeUsernameResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangeUsernameResponse {
    return new ChangeUsernameResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangeUsernameResponse {
    return new ChangeUsernameResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangeUsernameResponse {
    return new ChangeUsernameResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ChangeUsernameResponse | PlainMessage<ChangeUsernameResponse> | undefined, b: ChangeUsernameResponse | PlainMessage<ChangeUsernameResponse> | undefined): boolean {
    return proto3.util.equals(ChangeUsernameResponse, a, b);
  }
}

/**
 * @generated from message accountgateway.v1.ChangePasswordRequest
 */
export class ChangePasswordRequest extends Message<ChangePasswordRequest> {
  /**
   * @generated from field: string user_uuid = 1;
   */
  userUuid = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  /**
   * @generated from field: string new_password = 3;
   */
  newPassword = "";

  constructor(data?: PartialMessage<ChangePasswordRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "accountgateway.v1.ChangePasswordRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "new_password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangePasswordRequest {
    return new ChangePasswordRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangePasswordRequest {
    return new ChangePasswordRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangePasswordRequest {
    return new ChangePasswordRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ChangePasswordRequest | PlainMessage<ChangePasswordRequest> | undefined, b: ChangePasswordRequest | PlainMessage<ChangePasswordRequest> | undefined): boolean {
    return proto3.util.equals(ChangePasswordRequest, a, b);
  }
}

/**
 * @generated from message accountgateway.v1.ChangePasswordResponse
 */
export class ChangePasswordResponse extends Message<ChangePasswordResponse> {
  constructor(data?: PartialMessage<ChangePasswordResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "accountgateway.v1.ChangePasswordResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangePasswordResponse {
    return new ChangePasswordResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangePasswordResponse {
    return new ChangePasswordResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangePasswordResponse {
    return new ChangePasswordResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ChangePasswordResponse | PlainMessage<ChangePasswordResponse> | undefined, b: ChangePasswordResponse | PlainMessage<ChangePasswordResponse> | undefined): boolean {
    return proto3.util.equals(ChangePasswordResponse, a, b);
  }
}

/**
 * @generated from message accountgateway.v1.DeleteAccountRequest
 */
export class DeleteAccountRequest extends Message<DeleteAccountRequest> {
  /**
   * @generated from field: string user_uuid = 1;
   */
  userUuid = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  constructor(data?: PartialMessage<DeleteAccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "accountgateway.v1.DeleteAccountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAccountRequest {
    return new DeleteAccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAccountRequest {
    return new DeleteAccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAccountRequest {
    return new DeleteAccountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAccountRequest | PlainMessage<DeleteAccountRequest> | undefined, b: DeleteAccountRequest | PlainMessage<DeleteAccountRequest> | undefined): boolean {
    return proto3.util.equals(DeleteAccountRequest, a, b);
  }
}

/**
 * @generated from message accountgateway.v1.DeleteAccountResponse
 */
export class DeleteAccountResponse extends Message<DeleteAccountResponse> {
  constructor(data?: PartialMessage<DeleteAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "accountgateway.v1.DeleteAccountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAccountResponse {
    return new DeleteAccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAccountResponse {
    return new DeleteAccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAccountResponse {
    return new DeleteAccountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAccountResponse | PlainMessage<DeleteAccountResponse> | undefined, b: DeleteAccountResponse | PlainMessage<DeleteAccountResponse> | undefined): boolean {
    return proto3.util.equals(DeleteAccountResponse, a, b);
  }
}

/**
 * @generated from message accountgateway.v1.RegisterAccountRequest
 */
export class RegisterAccountRequest extends Message<RegisterAccountRequest> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  constructor(data?: PartialMessage<RegisterAccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "accountgateway.v1.RegisterAccountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterAccountRequest {
    return new RegisterAccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterAccountRequest {
    return new RegisterAccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterAccountRequest {
    return new RegisterAccountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterAccountRequest | PlainMessage<RegisterAccountRequest> | undefined, b: RegisterAccountRequest | PlainMessage<RegisterAccountRequest> | undefined): boolean {
    return proto3.util.equals(RegisterAccountRequest, a, b);
  }
}

/**
 * @generated from message accountgateway.v1.RegisterAccountResponse
 */
export class RegisterAccountResponse extends Message<RegisterAccountResponse> {
  /**
   * @generated from field: string session = 1;
   */
  session = "";

  /**
   * @generated from field: string user_uuid = 2;
   */
  userUuid = "";

  constructor(data?: PartialMessage<RegisterAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "accountgateway.v1.RegisterAccountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "session", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterAccountResponse {
    return new RegisterAccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterAccountResponse {
    return new RegisterAccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterAccountResponse {
    return new RegisterAccountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterAccountResponse | PlainMessage<RegisterAccountResponse> | undefined, b: RegisterAccountResponse | PlainMessage<RegisterAccountResponse> | undefined): boolean {
    return proto3.util.equals(RegisterAccountResponse, a, b);
  }
}

/**
 * @generated from message accountgateway.v1.DemoUserRegisterRequest
 */
export class DemoUserRegisterRequest extends Message<DemoUserRegisterRequest> {
  constructor(data?: PartialMessage<DemoUserRegisterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "accountgateway.v1.DemoUserRegisterRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DemoUserRegisterRequest {
    return new DemoUserRegisterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DemoUserRegisterRequest {
    return new DemoUserRegisterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DemoUserRegisterRequest {
    return new DemoUserRegisterRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DemoUserRegisterRequest | PlainMessage<DemoUserRegisterRequest> | undefined, b: DemoUserRegisterRequest | PlainMessage<DemoUserRegisterRequest> | undefined): boolean {
    return proto3.util.equals(DemoUserRegisterRequest, a, b);
  }
}

/**
 * @generated from message accountgateway.v1.DemoUserRegisterResponse
 */
export class DemoUserRegisterResponse extends Message<DemoUserRegisterResponse> {
  /**
   * @generated from field: string session = 1;
   */
  session = "";

  /**
   * @generated from field: string user_uuid = 2;
   */
  userUuid = "";

  constructor(data?: PartialMessage<DemoUserRegisterResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "accountgateway.v1.DemoUserRegisterResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "session", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DemoUserRegisterResponse {
    return new DemoUserRegisterResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DemoUserRegisterResponse {
    return new DemoUserRegisterResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DemoUserRegisterResponse {
    return new DemoUserRegisterResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DemoUserRegisterResponse | PlainMessage<DemoUserRegisterResponse> | undefined, b: DemoUserRegisterResponse | PlainMessage<DemoUserRegisterResponse> | undefined): boolean {
    return proto3.util.equals(DemoUserRegisterResponse, a, b);
  }
}

/**
 * @generated from message accountgateway.v1.UpgradeDemoUserRequest
 */
export class UpgradeDemoUserRequest extends Message<UpgradeDemoUserRequest> {
  /**
   * @generated from field: string user_uuid = 1;
   */
  userUuid = "";

  /**
   * @generated from field: string username = 2;
   */
  username = "";

  /**
   * @generated from field: string password = 3;
   */
  password = "";

  constructor(data?: PartialMessage<UpgradeDemoUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "accountgateway.v1.UpgradeDemoUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpgradeDemoUserRequest {
    return new UpgradeDemoUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpgradeDemoUserRequest {
    return new UpgradeDemoUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpgradeDemoUserRequest {
    return new UpgradeDemoUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpgradeDemoUserRequest | PlainMessage<UpgradeDemoUserRequest> | undefined, b: UpgradeDemoUserRequest | PlainMessage<UpgradeDemoUserRequest> | undefined): boolean {
    return proto3.util.equals(UpgradeDemoUserRequest, a, b);
  }
}

/**
 * @generated from message accountgateway.v1.UpgradeDemoUserResponse
 */
export class UpgradeDemoUserResponse extends Message<UpgradeDemoUserResponse> {
  constructor(data?: PartialMessage<UpgradeDemoUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "accountgateway.v1.UpgradeDemoUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpgradeDemoUserResponse {
    return new UpgradeDemoUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpgradeDemoUserResponse {
    return new UpgradeDemoUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpgradeDemoUserResponse {
    return new UpgradeDemoUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpgradeDemoUserResponse | PlainMessage<UpgradeDemoUserResponse> | undefined, b: UpgradeDemoUserResponse | PlainMessage<UpgradeDemoUserResponse> | undefined): boolean {
    return proto3.util.equals(UpgradeDemoUserResponse, a, b);
  }
}

