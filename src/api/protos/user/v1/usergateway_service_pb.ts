// @generated by protoc-gen-es v1.0.0 with parameter "target=ts"
// @generated from file protos/user/v1/usergateway_service.proto (package usergateway.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message usergateway.v1.GetUserRequest
 */
export class GetUserRequest extends Message<GetUserRequest> {
  /**
   * @generated from field: string user_uuid = 1;
   */
  userUuid = "";

  constructor(data?: PartialMessage<GetUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "usergateway.v1.GetUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserRequest {
    return new GetUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserRequest {
    return new GetUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserRequest {
    return new GetUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserRequest | PlainMessage<GetUserRequest> | undefined, b: GetUserRequest | PlainMessage<GetUserRequest> | undefined): boolean {
    return proto3.util.equals(GetUserRequest, a, b);
  }
}

/**
 * @generated from message usergateway.v1.GetUserResponse
 */
export class GetUserResponse extends Message<GetUserResponse> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string uuid = 2;
   */
  uuid = "";

  /**
   * @generated from field: usergateway.v1.Icon icon = 3;
   */
  icon?: Icon;

  /**
   * @generated from field: string description = 4;
   */
  description = "";

  /**
   * @generated from field: string join_date = 5;
   */
  joinDate = "";

  /**
   * @generated from field: repeated string chat_servers = 6;
   */
  chatServers: string[] = [];

  constructor(data?: PartialMessage<GetUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "usergateway.v1.GetUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "icon", kind: "message", T: Icon },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "join_date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "chat_servers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserResponse {
    return new GetUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserResponse {
    return new GetUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserResponse {
    return new GetUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserResponse | PlainMessage<GetUserResponse> | undefined, b: GetUserResponse | PlainMessage<GetUserResponse> | undefined): boolean {
    return proto3.util.equals(GetUserResponse, a, b);
  }
}

/**
 * @generated from message usergateway.v1.GetUsersRequest
 */
export class GetUsersRequest extends Message<GetUsersRequest> {
  /**
   * @generated from field: repeated string user_uuids = 1;
   */
  userUuids: string[] = [];

  constructor(data?: PartialMessage<GetUsersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "usergateway.v1.GetUsersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_uuids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUsersRequest {
    return new GetUsersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUsersRequest {
    return new GetUsersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUsersRequest {
    return new GetUsersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUsersRequest | PlainMessage<GetUsersRequest> | undefined, b: GetUsersRequest | PlainMessage<GetUsersRequest> | undefined): boolean {
    return proto3.util.equals(GetUsersRequest, a, b);
  }
}

/**
 * @generated from message usergateway.v1.GetUsersResponse
 */
export class GetUsersResponse extends Message<GetUsersResponse> {
  /**
   * @generated from field: repeated usergateway.v1.GetUserResponse users = 1;
   */
  users: GetUserResponse[] = [];

  constructor(data?: PartialMessage<GetUsersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "usergateway.v1.GetUsersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "users", kind: "message", T: GetUserResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUsersResponse {
    return new GetUsersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUsersResponse {
    return new GetUsersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUsersResponse {
    return new GetUsersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUsersResponse | PlainMessage<GetUsersResponse> | undefined, b: GetUsersResponse | PlainMessage<GetUsersResponse> | undefined): boolean {
    return proto3.util.equals(GetUsersResponse, a, b);
  }
}

/**
 * @generated from message usergateway.v1.EditDescriptionRequest
 */
export class EditDescriptionRequest extends Message<EditDescriptionRequest> {
  /**
   * @generated from field: string user_uuid = 1;
   */
  userUuid = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  constructor(data?: PartialMessage<EditDescriptionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "usergateway.v1.EditDescriptionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EditDescriptionRequest {
    return new EditDescriptionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EditDescriptionRequest {
    return new EditDescriptionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EditDescriptionRequest {
    return new EditDescriptionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EditDescriptionRequest | PlainMessage<EditDescriptionRequest> | undefined, b: EditDescriptionRequest | PlainMessage<EditDescriptionRequest> | undefined): boolean {
    return proto3.util.equals(EditDescriptionRequest, a, b);
  }
}

/**
 * @generated from message usergateway.v1.EditDescriptionResponse
 */
export class EditDescriptionResponse extends Message<EditDescriptionResponse> {
  constructor(data?: PartialMessage<EditDescriptionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "usergateway.v1.EditDescriptionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EditDescriptionResponse {
    return new EditDescriptionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EditDescriptionResponse {
    return new EditDescriptionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EditDescriptionResponse {
    return new EditDescriptionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: EditDescriptionResponse | PlainMessage<EditDescriptionResponse> | undefined, b: EditDescriptionResponse | PlainMessage<EditDescriptionResponse> | undefined): boolean {
    return proto3.util.equals(EditDescriptionResponse, a, b);
  }
}

/**
 * @generated from message usergateway.v1.ChangeAvatarRequest
 */
export class ChangeAvatarRequest extends Message<ChangeAvatarRequest> {
  /**
   * @generated from field: string user_uuid = 1;
   */
  userUuid = "";

  /**
   * @generated from field: string icon_uuid = 2;
   */
  iconUuid = "";

  constructor(data?: PartialMessage<ChangeAvatarRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "usergateway.v1.ChangeAvatarRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "icon_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangeAvatarRequest {
    return new ChangeAvatarRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangeAvatarRequest {
    return new ChangeAvatarRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangeAvatarRequest {
    return new ChangeAvatarRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ChangeAvatarRequest | PlainMessage<ChangeAvatarRequest> | undefined, b: ChangeAvatarRequest | PlainMessage<ChangeAvatarRequest> | undefined): boolean {
    return proto3.util.equals(ChangeAvatarRequest, a, b);
  }
}

/**
 * @generated from message usergateway.v1.ChangeAvatarResponse
 */
export class ChangeAvatarResponse extends Message<ChangeAvatarResponse> {
  constructor(data?: PartialMessage<ChangeAvatarResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "usergateway.v1.ChangeAvatarResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangeAvatarResponse {
    return new ChangeAvatarResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangeAvatarResponse {
    return new ChangeAvatarResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangeAvatarResponse {
    return new ChangeAvatarResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ChangeAvatarResponse | PlainMessage<ChangeAvatarResponse> | undefined, b: ChangeAvatarResponse | PlainMessage<ChangeAvatarResponse> | undefined): boolean {
    return proto3.util.equals(ChangeAvatarResponse, a, b);
  }
}

/**
 * @generated from message usergateway.v1.GetAvatarsRequest
 */
export class GetAvatarsRequest extends Message<GetAvatarsRequest> {
  constructor(data?: PartialMessage<GetAvatarsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "usergateway.v1.GetAvatarsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAvatarsRequest {
    return new GetAvatarsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAvatarsRequest {
    return new GetAvatarsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAvatarsRequest {
    return new GetAvatarsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAvatarsRequest | PlainMessage<GetAvatarsRequest> | undefined, b: GetAvatarsRequest | PlainMessage<GetAvatarsRequest> | undefined): boolean {
    return proto3.util.equals(GetAvatarsRequest, a, b);
  }
}

/**
 * @generated from message usergateway.v1.GetAvatarsResponse
 */
export class GetAvatarsResponse extends Message<GetAvatarsResponse> {
  /**
   * @generated from field: repeated usergateway.v1.Icon icons = 1;
   */
  icons: Icon[] = [];

  constructor(data?: PartialMessage<GetAvatarsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "usergateway.v1.GetAvatarsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "icons", kind: "message", T: Icon, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAvatarsResponse {
    return new GetAvatarsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAvatarsResponse {
    return new GetAvatarsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAvatarsResponse {
    return new GetAvatarsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAvatarsResponse | PlainMessage<GetAvatarsResponse> | undefined, b: GetAvatarsResponse | PlainMessage<GetAvatarsResponse> | undefined): boolean {
    return proto3.util.equals(GetAvatarsResponse, a, b);
  }
}

/**
 * @generated from message usergateway.v1.Icon
 */
export class Icon extends Message<Icon> {
  /**
   * @generated from field: string link = 1;
   */
  link = "";

  /**
   * @generated from field: string uuid = 2;
   */
  uuid = "";

  constructor(data?: PartialMessage<Icon>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "usergateway.v1.Icon";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "link", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Icon {
    return new Icon().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Icon {
    return new Icon().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Icon {
    return new Icon().fromJsonString(jsonString, options);
  }

  static equals(a: Icon | PlainMessage<Icon> | undefined, b: Icon | PlainMessage<Icon> | undefined): boolean {
    return proto3.util.equals(Icon, a, b);
  }
}

